---
type Language = 'en' | 'es';

interface LanguageInfo {
  label: string;
  flag: string;
}

const languages: Record<Language, LanguageInfo> = {
  en: { label: 'English', flag: '/icons/flags/gb.svg' },
  es: { label: 'Espa√±ol', flag: '/icons/flags/es.svg' }
};

interface Props {
  currentLang: Language;
}

const { currentLang } = Astro.props;

const entries = Object.entries(languages) as Array<[Language, LanguageInfo]>;
---

<div class="language-selector">
  <button 
  id="langButton"
  class="lang-button"
  aria-label="Select language"
  aria-haspopup="true"
  aria-expanded="false"
  aria-controls="langDropdown">
    <img src={languages[currentLang].flag} alt={`${languages[currentLang].label} flag`} class="flag-icon" />
  </button>
  <div class="dropdown" id="langDropdown">
    {entries.map(([lang, { label, flag }]) => (
      <a
        href={`/${lang}`}
        class={`lang-option ${currentLang === lang ? 'active' : ''}`}
        aria-label={`Change language to ${label}`}
      >
        <img src={flag} alt={`${label} flag`} class="flag-icon" />
        <span class="lang-label">{label}</span>
      </a>
    ))}
  </div>
</div>

<style>
  .language-selector {
    position: relative;
    display: inline-block;
  }

  .lang-button {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 40px;
    height: 40px;
    padding: 0;
    border: 1px solid rgba(0, 0, 0, 0.1);
    border-radius: 9999px;
    background: white;
    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.05);
    cursor: pointer;
    transition: transform 0.2s ease, background-color 0.2s;
  }

  .lang-button:hover {
    background-color: #f1f5f9;
    transform: scale(1.05);
  }

  .flag-icon {
    width: 24px;
    height: 24px;
    border-radius: 50%;
    object-fit: cover;
  }

  .dropdown {
    display: none;
    position: absolute;
    top: 100%;
    right: 0;
    background: white;
    border-radius: 0.75rem;
    padding: 0.5rem;
    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.1);
    z-index: 50;
    min-width: 160px;
    transform-origin: top right;
    transition: opacity 0.2s ease, transform 0.2s ease;
    opacity: 0;
    pointer-events: none;
    transform: scale(0.95);
  }

  .dropdown.show {
    display: block;
    opacity: 1;
    transform: scale(1);
    pointer-events: auto;
  }

  .lang-option {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    padding: 0.5rem 0.75rem;
    text-decoration: none;
    color: var(--text-color);
    border-radius: 0.5rem;
    transition: all 0.2s ease;
  }

  .lang-option:hover {
    background-color: var(--hover-bg);
  }

  .lang-option.active {
    background-color: var(--active-bg);
    color: var(--active-text);
  }

  .lang-label {
    font-size: 0.85rem;
    font-weight: 500;
  }

  @keyframes slideIn {
    from {
      opacity: 0;
      transform: translateY(-5px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
</style>

<script>
  const button = document.getElementById('langButton');
  const dropdown = document.getElementById('langDropdown');

  button?.addEventListener('click', () => {
  const isOpen = dropdown?.classList.toggle('show');
  if (button) {
    button.setAttribute('aria-expanded', isOpen ? 'true' : 'false');
  }
});

  window.addEventListener('click', (e) => {
    if (!button?.contains(e.target as Node)) {
      dropdown?.classList.remove('show');
    }
  });
</script>